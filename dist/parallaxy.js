!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Parallaxy=t()}(this,(function(){"use strict";const e=[],t={speed:.3,scale:1.5};class i{constructor(t,i={}){if(this.element=t,this.config=i,this.actualTranslation={x:0,y:0},this.actualScale=1,!t)throw"[Parallaxy] 'element' must be specified when you create a new Parallaxy object";i=this.verfiyConfiguration(i),t.style.willChange="transform",e.push({element:t,instance:this}),this.start()}verfiyConfiguration(e){if(e.x||e.y||(e.y={speed:t.speed}),e.x&&!e.x.speed&&(e.x.speed=t.speed),e.y&&!e.y.speed&&(e.y.speed=t.speed),e.x&&e.x.speed<=0)throw"[Parallaxy] 'speed' need to be bigger than 0";if(e.y&&e.y.speed<=0)throw"[Parallaxy] 'speed' need to be bigger than 0";if(e.x&&e.x.speed>1)throw"[Parallaxy] 'speed' need to be smaller than 1";if(e.y&&e.y.speed>1)throw"[Parallaxy] 'speed' need to be smaller than 1";if(e.scale<1)throw"[Parallaxy] 'scale' need to be bigger than 1 (or equal but with overflow)";return e.scale||(e.scale=t.scale),e}updateConfig(e={}){this.config=this.verfiyConfiguration(e),this.stop(),this.start()}matchingBreakingPoint(){const e=this.config.breakPoint;return!(!e||!window.matchMedia(e).matches)&&(this.stop(),!0)}start(){this.matchingBreakingPoint()||this.updatePosition()}stop(){window.cancelAnimationFrame(this.frameId),this.reset()}reset(){this.element.style.transform=""}updatePosition(){if(!this.element.isConnected)return void this.stop();const e=this.element.getBoundingClientRect(),t=[];t.push(`scale(${this.config.scale})`);let i={x:0,y:0};if(this.config.y){const t=this.translateY(e);i.y=parseFloat(t.toFixed(2))}if(this.config.x){const t=this.translateX(e);i.x=parseFloat(t.toFixed(2))}t.push(`translate3d(${i.x}px, ${i.y}px, 0px)`),this.actualScale===this.config.scale&&this.actualTranslation.x===i.x&&this.actualTranslation.y===i.y||(this.element.style.transform=t.join(" "),this.actualScale=this.config.scale,this.actualTranslation.x=i.x,this.actualTranslation.y=i.y),this.frameId=window.requestAnimationFrame(this.updatePosition.bind(this))}translateY(e){var t;const i=this.config.y.speed,n=this.config.y.inverted,s=e.top+e.height/2;let o=((null!==(t=this.config.axes)&&void 0!==t?t:window.innerHeight/2)-s)*i;n&&(o=-o);const a=(e.height-e.height/this.config.scale)/2;return!this.config.y.overflow&&Math.abs(o)>=a&&(o=o<0?-a:a),o}translateX(e){var t;const i=this.config.x.speed,n=this.config.x.inverted,s=e.top+e.height/2;let o=((null!==(t=this.config.axes)&&void 0!==t?t:window.innerHeight/2)-s)*i;n&&(o=-o);const a=(e.width-e.width/this.config.scale)/2;return!this.config.x.overflow&&Math.abs(o)>=a&&(o=o<0?-a:a),o}}function n(e){return null!=e&&(""===e||"true"===e)}function s(e){const t=parseFloat(e);return isNaN(t)||"number"!=typeof t?void 0:t}function o(t){return e.findIndex((e=>e.element===t))}function a(e){var i,o;const a=e.dataset,r=void 0!==a.prlX,l=void 0!==a.prlY,d={};r&&(d.x={speed:null!==(i=s(a.prlSpeedX))&&void 0!==i?i:t.speed,inverted:n(a.prlInvertedX),overflow:n(a.prlOverflowX)}),l&&(d.y={speed:null!==(o=s(a.prlSpeedY))&&void 0!==o?o:t.speed,inverted:n(a.prlInvertedY),overflow:n(a.prlOverflowY)}),d.scale=s(a.prlScale);const c=a.prlBreakpoint;void 0!==c&&(d.breakPoint=c);const h=a.prlAxes;return void 0!==h&&(d.axes=s(h)),d}function r(e){var t,n;for(const s of e){const e=-1!==o(s),r=void 0===(null===(t=s.dataset)||void 0===t?void 0:t.prlX)&&void 0===(null===(n=s.dataset)||void 0===n?void 0:n.prlY);e||r||new i(s,a(s))}}return document.addEventListener("DOMContentLoaded",(function(){r(Array.from(document.querySelectorAll("[data-prl-y], [data-prl-x]"))),new MutationObserver((function(t){var i,s;const l=[];for(const r of null!=t?t:[]){if("attributes"===r.type&&r.attributeName.includes("data-prl")){const t=r.target,d=o(t);(n(null===(i=t.dataset)||void 0===i?void 0:i.prlX)||n(null===(s=t.dataset)||void 0===s?void 0:s.prlY))&&-1===d?l.push(t):-1!==d&&e[d].instance.updateConfig(a(e[d].element))}for(const e of r.addedNodes)l.push(e);for(const t of r.removedNodes){const i=o(t);-1!==i&&e.splice(i,1)}}l.length>0&&r(l)})).observe(window.document.documentElement,{childList:!0,subtree:!0,attributes:!0})})),i}));
//# sourceMappingURL=parallaxy.js.map
